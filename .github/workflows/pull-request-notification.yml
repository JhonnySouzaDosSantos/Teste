name: Notificar Pull Requests no Discord

on:
  pull_request:
    types: [opened, closed, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created]

jobs:
  notificar:
    runs-on: ubuntu-latest
    steps:
      - name: Enviar para Discord
        env:
          WEBHOOK_URL: ${{ secrets.DISCORD_PR_WEBHOOK }}
        run: |
          # Determina o tipo de evento
          EVENT_NAME=${{ github.event_name }}
          ACTION=${{ github.event.action }}
          
          # Mensagem base
          MESSAGE="üöÄ **Atividade em Pull Request**\n"
          
          # Dados comuns
          if [ "$EVENT_NAME" = "pull_request" ]; then
            PR_URL=${{ github.event.pull_request.html_url }}
            PR_TITLE=${{ github.event.pull_request.title }}
            AUTHOR=${{ github.event.pull_request.user.login }}
            BRANCH="${{ github.event.pull_request.head.ref }} ‚Üí ${{ github.event.pull_request.base.ref }}"
            
            MESSAGE+="üîπ **T√≠tulo:** [$PR_TITLE]($PR_URL)\n"
            MESSAGE+="üîπ **Autor:** $AUTHOR\n"
            MESSAGE+="üåø **Branch:** $BRANCH\n"
            
            case $ACTION in
              "opened")
                MESSAGE+="üü¢ **PR Aberto**\n"
                ;;
              "reopened")
                MESSAGE+="üü† **PR Reaberto**\n"
                ;;
              "closed")
                if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
                  MESSAGE+="üü£ **PR Mergeado!**\n"
                else
                  MESSAGE+="üî¥ **PR Fechado**\n"
                fi
                ;;
              "ready_for_review")
                MESSAGE+="üü° **PR Pronto para Revis√£o**\n"
                ;;
            esac
          
          elif [ "$EVENT_NAME" = "pull_request_review" ]; then
            PR_URL=${{ github.event.pull_request.html_url }}
            PR_TITLE=${{ github.event.pull_request.title }}
            REVIEWER=${{ github.event.review.user.login }}
            STATE=${{ github.event.review.state }}
            
            MESSAGE+="üîπ **T√≠tulo:** [$PR_TITLE]($PR_URL)\n"
            MESSAGE+="üîπ **Revisor:** $REVIEWER\n"
            
            case $STATE in
              "approved")
                MESSAGE+="‚úÖ **Aprova√ß√£o**\n"
                ;;
              "changes_requested")
                MESSAGE+="‚úèÔ∏è **Altera√ß√µes solicitadas**\n"
                ;;
              "commented")
                MESSAGE+="üí¨ **Coment√°rio na revis√£o**\n"
                ;;
            esac
          
          elif [ "$EVENT_NAME" = "pull_request_review_comment" ]; then
            PR_URL=${{ github.event.pull_request.html_url }}
            PR_TITLE=${{ github.event.pull_request.title }}
            COMMENTER=${{ github.event.comment.user.login }}
            COMMENT=$(echo "${{ github.event.comment.body }}" | head -c 100)
            
            MESSAGE+="üîπ **T√≠tulo:** [$PR_TITLE]($PR_URL)\n"
            MESSAGE+="üîπ **Coment√°rio de:** $COMMENTER\n"
            MESSAGE+="üí¨ **Coment√°rio:** ${COMMENT}...\n"
          fi

          # Envia para o Discord
          curl -X POST \
               -H "Content-Type: application/json" \
               -d "{\"content\":\"$MESSAGE\"}" \
               "$WEBHOOK_URL"